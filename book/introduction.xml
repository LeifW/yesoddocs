<?xml version="1.0" encoding="utf-8"?>
<chapter id="introduction" status="Unproofed">
    <title>Introduction</title>
    <intro>
        <p>Since web programming began, people haved been trying to make the development process a more pleasant one. As a community, we have continually pushed new techniques to try and solve some of the lingering difficulties of security threats, the stateless nature of HTTP, the multiple languages (HTML, CSS, Javascript) necessary to create a powerful web application, and more.</p>
        <p>Yesod attempts to ease the web development process by playing to the strengths of the Haskell programming language. Haskell's strong compile-time guarantees of correctness not only encompass types; referential transparency ensures that we don't have any unintended side effects. Pattern matching on algebraic data types can help guarantee we've accounted for every possible case. By building upon Haskell, entire classes of bugs disappear.</p>
        <p>Unfortunately, using Haskell isn't enough. The web, by its very nature, is <i>not</i> type safe. Even the simplest case of distinguishing between an integer and string is impossible: all data on the web is transfered as raw bytes, evading our best efforts of type safety. Every app writer is left with the task of validating that all input is valid. I call this problem <term>the boundary issue</term>: as much as your application is type safe on the inside, every boundary with the outside world still needs to be sanitized.</p>
    </intro>

    <section id="type-safety">
        <title>Type Safety</title>
        <p>This is where Yesod comes in. By using high-level declarative techniques, you can specify the exact input types you are expecting. And the process works the other way as well: using a process of type-safe URLs, you can make sure that the data you send out is also guaranteed to be well formed.</p>
        <p>The boundary issue is not just a problem when dealing with the client: the same problem exists when persisting and loading data. Once again, Yesod saves you on the boundary by performing the marshaling of data for you. You can specify your entities in a high-level definition and remain blissfully ignorant of the details.</p>
    </section>
    <section id="concise">
        <title>Concise</title>
        <p>Yesod is of course not the first project to strive for goals like these. It does, however, have a powerful weapon in its arsenal: quasi-quotation. Quasi-quotation allows the embedding of an arbitrary syntax within your source code, which will then be converted to Haskell. This grants us a number of benefits:</p>
        <ul>
            <li>You don't need to try and shoe-horn a very domain-specific idea into Haskell's syntactical rules.</li>
            <li>By remaining within the source code, everything is checked at compile time to ensure it is both properly formatted and consistent with the rest of your code.</li>
            <li>We don't need any XML, INI, or YAML config files.</li>
        </ul>
    </section>
    <section id="performance">
        <title>Performance</title>
        <p>Haskell's main compiler, the GHC, has amazing performance characteristics, and is improving all the time. This choice of language by itself gives Yesod a large performance advantage over other offerings. But that's not enough: we need an architecture designed for performance.</p>
        <p>The usage of quasi-quotation is a minor example of this: by allowing HTML, CSS and JavaScript to be analyzed at compile time, Yesod both avoids costly disk I/O at runtime and can optimize the rendering of this code. But the architectural decisions go deeper: we use advanced techniques such as enumerators in the underlying libraries to make sure our code runs in constant memory, without exhausting precious file handles and other resources. By offering high-level abstractions, you can get highly compressed and properly cached CSS and JavaScript.</p>
    </section>
    <section id="modular">
        <title>Modular</title>
        <p>Yesod has spawned the creation of over a dozen packages, all of which are usable in a context outside of Yesod itself. One of the goals of the project is to contribute back to the community as much as possible; as such, even if you are not planning on using Yesod in your next project, a large portion of this book may still be relevant for your needs.</p>
        <p>Of course, these libraries have all been designed to integrate well together. Using the Yesod Framework should give you a strong feeling of consistency throughout the various APIs.</p>
    </section>
    <section id="solid">
        <title>A solid foundation</title>
        <p>I remember once seeing a PHP framework advertising support for UTF-8. In the Haskell world, we usually have the opposite problem: there are a number of packages providing powerful and well-designed support for the problem. The Haskell community is constantly pushing the boundaries finding the cleanest, most efficient solutions to problems.</p>
        <p>The downside of such a powerful ecosystem is the complexity of choice. By using Yesod, you will already have most of the tools chosen for you, and you can be guaranteed they work together. Of course, you always have the option of pulling in your own solution.</p>
        <p>As a real-life example, Yesod and Hamlet (the default templating language) use <hackage>blaze-builder</hackage> for textual content generation. This choice was made because blaze provides the fastest interface for generating UTF-8 data. Anyone who wants to use one of the other great libraries out there, such as <hackage>text</hackage> should have no problem dropping it in.</p>
    </section>
</chapter>
