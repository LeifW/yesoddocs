<?xml version="1.0" encoding="utf-8"?>
<chapter id="sessions" status="Unproofed">
    <title>Sessions</title>
    <intro>

        <p id="i1">As much as possible, RESTful applications should avoid
            storing state about an interaction with a client. However, it is
            sometimes unavoidable. Features like shopping carts are the classic
            example, but other more mundane interactions like proper login
            handling can be greatly enhanced by proper usage of sessions.</p>

        <p id="i2">This chapter will describe how Yesod stores session data,
            how you can access this data, and some special functions to help
            you make the most of sessions.</p>
    </intro>
    <section id="clientsession">
        <title>Clientsession</title>

        <p id="cs1">One of the earliest packages spun off from Yesod was
            <hackage>clientsession</hackage>. This package uses encryption and
            signatures to store data in a client-side cookie. The encryption
            prevents the user from tampering with the data, and the signature
            ensures that the session cannot be hijacked.</p>

        <p id="cs2">It might sound like a bad idea from an efficiency
            standpoint to store data in a cookie: after all, this means that
            the data must be sent on every request. However, in practice,
            clientsession can be a great boon for performance.</p>

        <ul>
            <li>No server side database lookup is required to service a request.</li>
            <li>We can easily scale horizontally: each request contains all the information we need to send a response.</li>
            <li>Production sites should serve their static content from a separate domain name to avoid the overhead of transmitting the session cookie for each request.</li>
        </ul>

        <p id="cs3">Obviously, storing megabytes of information in the session
            will be a bad idea. But for that matter, most session
            implementations recommend against such practices. If you really
            need massive storage for a user, it is best to simply store a
            lookup key in the session, and put the actual data in a
            database.</p>
    </section>

    <section id="control">
        <title>Controlling sessions</title>

        <p id="c1">There are three functions in the Yesod typeclass that
            control how sessions work. <code>encryptKey</code> returns the
            encryption key used. By default, it will take this from a local
            file, so that sessions can persist between database shutdowns. This
            file will be automatically created and filled with random data if
            it does not exist. And if you override this function to return
            <code>Nothing</code>, sessions will be disabled.</p>

        <advanced>

            <p id="c2">Why disable sessions? They <b>do</b> introduce a
                performance overhead. Under normal circumstances, this overhead
                is minimal, especially compared to database access. However,
                when dealing with very basic tasks, the overhead can become
                noticeable. But be careful about disabling sessions: this will
                also disable such features as <abbr title="Cross Site Request Forgery">
                    CSRF</abbr> protection.</p>
        </advanced>

        <p id="c3">The next function is <code>clientSessionDuration</code>.
            This function simply gives the number of minutes that a session
            should be active. The default is 120 (2 hours).</p>

        <p id="c4">This value ends up affecting the session cookie in two ways:
            firstly, it determines the expiration date for the cookie itself.
            More importantly, however, the session expiration timestamp is
            encoded inside the session signature. When Yesod decodes the
            signature, it checks if the date is in the past; if so, it ignores
            the session values.</p>

        <advanced>

            <p id="c5">Every time Yesod sends a response to the client, it
                sends an updated session cookie with a new expire date. This
                way, even if you do not change the session values themselves, a
                session will not time out if the user continues to browse your
                site.</p>
        </advanced>

        <p id="c6">And this leads very nicely to the last function:
            sessionIpAddress. By default, Yesod also encodes the client's IP
            address inside the cookie to prevent session hijacking. In general,
            this is a good thing. However, some ISPs are known for putting
            their users behind proxies that rewrite their IP addresses,
            sometimes changing the source IP in the middle of the session. If
            this happens, and you have sessionIpAddress enabled, the user's
            session will be reset. Turning this setting to false will allow a
            session to continue under such circumstances, at the cost of
            exposing a user to session hijacking.</p>
    </section>

    <section id="ops">
        <title>Session Operations</title>

        <p id="o1">Like most frameworks, sessions in Yesod are simple key-value
            stores. The base session API boils down to just three functions:
            <code>lookupSession</code> gets a value for a key (if available),
            <code>setSession</code> sets a value for a key, and
            <code>deleteSession</code> clears a value for a key.</p>

        <snippet name="sessions-basic"/>
    </section>

    <section id="messages">
        <title>Messages</title>

        <p id="m1">One usage of sessions previously alluded to is messages.
            They come to solve a common problem in web development: the user
            performs a POST request, the web app makes a change, and then the
            web app wants to <i>simultaneously</i> redirect the user to a new
            page and send the user a success message.</p>
        
        <p id="m2">Yesod provides a pair of functions to make this very easy:
            <code>setMessage</code> stores a value in the session, and
            <code>getMessage</code> both reads the value most recently put into
            the session, and clears the old value so it does not accidently get
            displayed twice.</p>

        <p id="m3">It is recommended to have a call to getMessage in
            <code>defaultLayout</code> so that any available message is shown
            to a user immediately, without having to remember to add getMessage
            calls to every handler.</p>
    </section>

    <section id="ultdest">
        <title>Ultimate Destination</title>

        <p id="u1">Not to be confused with a horror film, this concept is used
            internally in <hackage>yesod-auth</hackage>. Simply put, let's say
            a user requests a page that requires authentication. Clearly, you
            need to send them to the login page. A well-designed web app will
            then <i>send them back to the first page they requested</i>. That's
            what we call the ultimate destination.</p>

        <p id="u2"><code>redirectUltDest</code> sends the user to the ultimate
            destination set in his/her session, clearing that value from the
            session. It takes a default destination as well, in case there is
            no destination set. For setting the session, there are three
            variants: <code>setUltDest</code> sets the destination to the given
            type-safe URL, <code>setUltDestString</code> does the same with a
            text URL, and <code>setUltDest'</code> sets the destination to the
            currently requested URL.</p>
    </section>

    <summary>

        <p id="s1">The session API in Yesod is very simple. It provides a
            simple key-value store, and a few convenience functions built on
            top for common use cases. If used properly, with small payloads,
            sessions should be an unobtrusive part of your web development.</p>

    </summary>
</chapter>
