<?xml version="1.0" encoding="utf-8"?>
<chapter id="deploying" status="Unproofed">
    <title>Deploying your Webapp</title>
    <intro>
        <p id="intro1">I can't speak for others, but I personally prefer programming to system administration. But the fact is that, eventually, you need to serve your app somehow, and odds are that you'll need to be the one to set it up.</p>
        <p id="intro2">There are some promising initiatives in the Haskell web community towards making deployment easier. In the future, we may even have a service that allows you to deploy your app with a single command.</p>
        <p id="intro3">But we're not there yet. And even if we were, such a solution will never work for everyone. This chapter covers the different options you have for deployment, and gives some general recommendations on what you should choose in different situations.</p>
    </intro>
    <section id="warp">
        <title>Warp</title>
        <p id="warp1">As we have mentioned before, Yesod is built on the Web Application Interface (WAI), allowing it to run on any WAI backend. At the time of writing, the following backends are available:</p>
        <ul>
            <li>Warp</li>
            <li>FastCGI</li>
            <li>SCGI</li>
            <li>CGI</li>
            <li>Webkit</li>
            <li>Development server</li>
        </ul>
        <p id="warp2">The last two are not intended for production deployments. Of the remaining four, all can be used for production deployment in theory. In practice, a CGI backend will likely be horribly inefficient, since a new process must be spawned for each connection. And SCGI is not nearly as well supported by frontend web server as Warp or FastCGI.</p>
        <p id="warp3">So between the two remaining choices, Warp gets a very strong recommendation because:</p>
        <ul>
            <li>It is significantly faster.</li>
            <li>Like FastCGI, it can run behind a frontend server like Nginx, using reverse HTTP proxy.</li>
            <li>In addition, it is a fully capable server of its own accord, and can therefore be used without any frontend server.</li>
        </ul>
        <p id="warp4">But as fast as Warp is, it is still optimized as an application server, not a static file server. Therefore, for best performance, we recommend using Warp as your WAI backend, and to reverse proxy it behind Nginx, which is probably the fastest web server available today.</p>
        <section id="config">
            <title>Configuration</title>
            <p id="config1">In general, Nginx will listen on port 80 and your Yesod/Warp app will listen on some unprivileged port (lets say 4321). You will then need to provide a nginx.conf file, such as:</p>
            <codeblock>daemon off; # Don't run nginx in the background, good for monitoring apps
events {
    worker_connections 4096;
}

http {
    server {
        listen 80; # Incoming port for Nginx
        server_name www.myserver.com;
        location / {
            proxy_pass http://127.0.0.1:4321; # Reverse proxy to your Yesod app
        }
    }
}</codeblock>
            <p id="config2">You can add as many server blocks as you like. A common addition is to ensure users always access your pages with the www prefix on the domain name, ensuring the RESTful principle of canonical URLs. (You could just as easily do the opposite and always strip the www, just make sure that your choice is reflected in both the nginx config and the approot of your site.) In this case, we would add the block:</p>
            <codeblock>server {
    listen 80;
    server_name myserver.com;
    rewrite ^/(.*) http://www.myserver.com/$1 permanent;
}</codeblock>
            <p id="config3">A highly recommended optimization is to server static files from a separate domain name, therefore bypassing the cookie transfer overhead. Assuming that our static files are stored in the <code>static</code> folder within our site folder, and the site folder is located at <code>/home/michael/sites/mysite</code>, this would look like:</p>
            <codeblock>server {
    listen 80;
    server_name static.myserver.com;
    root /home/michael/sites/mysite/static;
    expires max; # Take advantage of yesod-static's content hash query strings
}</codeblock>
            <p id="config4">In order for this to work, your site must properly rewrite static URLs to this alternate domain name. The scaffolded site is set up to make this fairly simple via the Settings.staticroot function and the definition of urlRenderOverride. However, if you just want to get the benefit of nginx's faster static file serving without dealing with separate domain names, you can instead modify your original server block like so:</p>
            <codeblock>server {
    listen 80; # Incoming port for Nginx
    server_name www.myserver.com;
    location / {
        proxy_pass http://127.0.0.1:4321; # Reverse proxy to your Yesod app
    }
    location /static {
        root /home/michael/sites/mysite; # Notice that we do *not* include /static
        expires max;
    }
}</codeblock>
        </section>
        <section id="process">
            <title>Server Process</title>
            <p id="process1">Many people are familiar with an Apache/mod_php or Lighttpd/FastCGI kind of setup, where the web server automatically spawns the web application. With nginx, either for reverse proxying or FastCGI, this is not the case: you are responsible to run your own process. I strongly recommend a monitoring utility which will automatically restart your application in case it crashes. There are many great options out there, such as daemontools.</p>
            <p id="process2">To give a concrete example, here is an Upstart config file. The file must be placed in <code>/etc/init/mysite.conf</code>:</p>
            <codeblock>description "My awesome Yesod application"
start on runlevel [2345];
stop on runlevel [!2345];
respawn
chdir /home/michael/sites/mysite
exec /home/michael/sites/mysite/dist/build/mysite/mysite</codeblock>
            <p id="process3">Once this is in place, bringing up your application is as simple as <code>sudo start mysite</code>.</p>
        </section>
    </section>
    <section id="fastcgi">
        <title>FastCGI</title>
        <p id="fastcgi1">Some people may prefer using FastCGI for deployment. In this case, you'll need to add an extra tool to the mix. FastCGI works by receiving new connection from a file descriptor. The C library assumes that this file descriptor will be 0 (standard input), so you need to use the spawn-fcgi program to bind your aplication's standard input to the correct socket.</p>
        <p id="fastcgi2">It can be very convenient to use Unix named sockets for this instead of binding to a port, especially when hosting multiple applications on a single host. A possible script to load up your app could be:</p>
        <codeblock>spawn-fcgi \
    -d /home/michael/sites/mysite \
    -s /tmp/mysite.socket \
    -n \
    -M 511
    -u michael
    -- /home/michael/sites/mysite/dist/build/mysite-fastcgi/mysite-fastcgi</codeblock>
        <p id="fastcgi3">You will also need to configure your frontend server to speak to your app over FastCGI. This is relatively painless in Nginx:</p>
        <codeblock>server {
    listen 80;
    server_name www.myserver.com;
    location / {
        fastcgi_pass unix:/tmp/mysite.socket;
    }
}</codeblock>
        <p id="fastcgi4">That should look pretty familiar from above. The only last trick is that, with Nginx, you need to manually specify all of the FastCGI variables. It is recommended to store these in a separate file (say, fastcgi.conf) and then add <code>include fastcgi.conf;</code> to the end of your http block. The contents of the file, to work with WAI, should be:</p>
        <codeblock>fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;
fastcgi_param  PATH_INFO          $fastcgi_script_name;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;
</codeblock>
    </section>
    <section id="desktop">
        <title>Desktop</title>
        <p id="desktop1">Another nifty backend is <hackage>wai-handler-webkit</hackage>. This backend combines Warp and QtWebkit to create an executable that a user simply double-clicks. This can be a convenient way to provide an offline version of your application.</p>
        <p id="desktop2">One of the very nice conveniences of Yesod for this is that your templates are all compiled into the executable, and thus do not need to be distributed with your application. Static files do, however.</p>
        <note>Earlier versions of Yesod allowed for embedding of static files in the executable as well. This is not a particularly complicated feature to implement, and if there is demand, can be added back in the future.</note>
    </section>
    <section id="cgi-apache">
        <title>CGI on Apache</title>
        <p id="cgi1">CGI and FastCGI work almost identically on Apache, so it should be fairly straight-forward to port this configuration. You essentially need to accomplish two goals:</p>
        <ol>
            <li>Get the server to serve your file as (Fast)CGI.</li>
            <li>Rewrite all requests to your site to go through the (Fast)CGI executable.</li>
        </ol>

        <p id="cgi2">Here is a configuration file for serving a blog application, with an executable named "bloggy.cgi", living in a subfolder named "blog" of the document root. This example was taken from an application living in the path <code>/f5/snoyman/public/blog</code>.</p>
        <codeblock>Options +ExecCGI
AddHandler cgi-script .cgi
Options +FollowSymlinks

RewriteEngine On
RewriteRule ^/f5/snoyman/public/blog$ /blog/ [R=301,S=1]
RewriteCond $1 !^bloggy.cgi
RewriteCond $1 !^static/
RewriteRule ^(.*) bloggy.cgi/$1 [L]</codeblock>

        <p id="cgi3">The first RewriteRule is to deal with subfolders. In particular, it redirects a request for <code>/blog</code> to <code>/blog/</code>. The first RewriteCond prevents directly requesting the executable, the second allows Apache to serve the static files, and the last line does the actual rewriting.</p>
    </section>
    <section id="fastcgi-lighttpd">
        <title>FastCGI on lighttpd</title>
        <p id="l1">For this example, I've left off some of the basic FastCGI settings like mime-types. I also have a more complex file in production that prepends "www." when absent and serves static files from a separate domain. However, this should serve to show the basics.</p>

        <p id="l2">Here, "/home/michael/fastcgi" is the fastcgi application. The idea is to rewrite all requests to start with "/app", and then serve everything beginning with "/app" via the FastCGI executable.</p>

<codeblock>server.port = 3000
server.document-root = "/home/michael"
server.modules = ("mod_fastcgi", "mod_rewrite")

url.rewrite-once = (
  "(.*)" => "/app/$1"
)

fastcgi.server = (
    "/app" => ((
        "socket" => "/tmp/test.fastcgi.socket",
        "check-local" => "disable",
        "bin-path" => "/home/michael/fastcgi", # full path to executable
        "min-procs" => 1,
        "max-procs" => 30,
        "idle-timeout" => 30
    ))
)</codeblock>
    </section>
    <section id="cgi-lighttpd">
        <title>CGI on lighttpd</title>
        <p id="cl1">This is basically the same as the FastCGI version, but tells lighttpd to run a file ending in ".cgi" as a CGI executable. In this case, the file lives at "/home/michael/myapp.cgi".</p>

<codeblock>server.port = 3000
server.document-root = "/home/michael"
server.modules = ("mod_cgi", "mod_rewrite")

url.rewrite-once = (
    "(.*)" => "/myapp.cgi/$1"
)

cgi.assign = (".cgi" => "")</codeblock>
    </section>
</chapter>
